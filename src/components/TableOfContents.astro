---
export interface Heading {
  depth: number;
  text: string;
  slug: string;
}

export interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;

// h1を除外し、h2から開始する目次を作成
const tocHeadings = headings.filter(h => h.depth > 1 && h.depth <= 4);
---

<nav class="toc-container" aria-label="目次">
  <h2 class="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-4">目次</h2>
  <ul class="toc-list space-y-1 text-sm">
    {tocHeadings.map((heading, index) => (
      <li 
        class={`toc-item toc-level-${heading.depth}`}
        style={`padding-left: ${(heading.depth - 2) * 1.5}rem`}
      >
        <a 
          href={`#${heading.slug}`}
          class="toc-link group flex items-center gap-2 py-1.5 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-all duration-200"
          data-heading-slug={heading.slug}
        >
          {/* インジケーター */}
          <span class="toc-indicator h-2 w-2 rounded-full bg-gray-300 dark:bg-gray-600 group-hover:bg-gray-400 dark:group-hover:bg-gray-500 transition-all duration-200 flex-shrink-0"></span>
          <span class="leading-relaxed">{heading.text}</span>
        </a>
      </li>
    ))}
  </ul>
</nav>

<style>
  .toc-container {
    @apply sticky top-24 max-h-[calc(100vh-8rem)] overflow-y-auto;
  }

  .toc-link.active {
    @apply text-indigo-600 dark:text-indigo-400 font-medium;
  }

  .toc-link.active .toc-indicator {
    @apply bg-indigo-600 dark:bg-indigo-400 scale-125;
  }

  /* 階層ごとのインジケータースタイル */
  .toc-level-3 .toc-indicator {
    @apply h-1.5 w-1.5;
  }

  .toc-level-4 .toc-indicator {
    @apply h-1 w-1;
  }


  /* スクロールバーのスタイリング */
  .toc-container::-webkit-scrollbar {
    width: 4px;
  }

  .toc-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-container::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-600 rounded-full;
  }

  .toc-container::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400 dark:bg-gray-500;
  }
</style>

<script>
  // スクロール連動機能
  const observeHeadings = () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headingElements = document.querySelectorAll('h2[id], h3[id], h4[id]');
    
    // Intersection Observer の設定
    const observerOptions = {
      rootMargin: '-80px 0px -80% 0px',
      threshold: 0
    };

    let activeHeading: string | null = null;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          
          // 現在のアクティブな見出しを更新
          activeHeading = id;
          
          // すべてのリンクからactiveクラスを削除
          tocLinks.forEach((link) => {
            link.classList.remove('active');
          });
          
          // 対応するリンクにactiveクラスを追加
          const activeLink = document.querySelector(`[data-heading-slug="${id}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      });
    }, observerOptions);

    // すべての見出し要素を監視
    headingElements.forEach((heading) => {
      observer.observe(heading);
    });

    // クリック時のスムーズスクロール
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  };

  // DOMContentLoadedとastro:page-loadの両方で実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeHeadings);
  } else {
    observeHeadings();
  }

  // ページ遷移時にも実行（Astroのページ遷移対応）
  document.addEventListener('astro:page-load', observeHeadings);
</script>